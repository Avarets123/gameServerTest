import {
  ConnectedSocket,
  MessageBody,
  SubscribeMessage,
  WebSocketGateway,
  WebSocketServer,
} from '@nestjs/websockets'
import { Server, Socket } from 'socket.io'
import { RmqService } from 'src/infrastructure/rmq/rmq.service'
import { ChatEventTypeEnum } from '../enums/chatEvents.enum'
import { RabbitSubscribe } from '@golevelup/nestjs-rabbitmq'
import { CHAT_EXCHANGE } from 'src/infrastructure/rmq/rmq.module'
import { RoomsJoinedDto } from '../dto/rooms/roomsJoined.dto'
import { MemberLefDto } from '../dto/members/meberLeft.dto'
import { HttpStatus, UseFilters, UseGuards, UsePipes } from '@nestjs/common'
import { AllWSExceptionFilter } from 'src/infrastructure/exceptions/filters/allExceptionsFilters'
import { SocketEventsEnum } from '../enums/socketEvents.enum'
import { ChatRoutingKeyEnum } from '../enums/chatRoutingKey.enum'
import { ChatWriteRequestTypeEnum } from '../enums/chatWriteRequest.enum'
import { ChatQueueEnum } from '../enums/chatQueue.enum'
import { WsAuthGuard } from '../../auth/guards/wsAuth.guard'
import { WSValidationPipe } from 'src/infrastructure/validation/validation.boot'
import { MemberTypingDto } from '../dto/members/memberTyping.dto'
import { MessageCreateDto } from '../dto/messages/messageCreate.dto'
import { MessageDeleteDto } from '../dto/messages/messageDelete.dto'
import { RoomCloseDto } from '../dto/rooms/roomClose.dto'
import { RoomDeleteDto } from '../dto/rooms/roomDelete.dto'
import { MessageDeliveredDto } from '../dto/messages/messageDelivered.dto'
import { UnAuthorizedException } from '../exception/unauthorized.exception'
import { MessageUpdatedType } from '../types/messageUpdated.type'
import { ChatReadRequestTypeEnum } from '../enums/chatReadRequest.enum'
import { MessageSignatureType } from '../types/messageSignature.type'
import { MessageReadDto } from '../dto/messages/messageRead.dto'

@UseFilters(AllWSExceptionFilter)
@WebSocketGateway({ cors: {} })
export class ChatSocketsGateway {
  constructor(private readonly rmqService: RmqService) {}

  @WebSocketServer()
  server: Server

  @UsePipes(WSValidationPipe)
  @UseGuards(WsAuthGuard)
  @SubscribeMessage(SocketEventsEnum.WEB_MESSAGE_CREATE)
  async eventMessageCreate(
    @MessageBody() body: MessageCreateDto,
    @ConnectedSocket() socket: Socket,
  ) {
    body.memberId = socket.data.memberId

    await this.rmqService.publishMessage(
      CHAT_EXCHANGE,
      ChatRoutingKeyEnum.DATA_WRITE,
      {
        type: ChatWriteRequestTypeEnum.MESSAGE_CREATE,
        body,
        socketId: socket.id,
      },
    )
  }

  @UsePipes(WSValidationPipe)
  @UseGuards(WsAuthGuard)
  @SubscribeMessage(SocketEventsEnum.WEB_MESSAGE_READ)
  async eventMessageRead(
    @MessageBody() body: MessageReadDto,
    @ConnectedSocket() socket: Socket,
  ) {
    body.memberId = socket.data.memberId

    await this.rmqService.publishMessage(
      CHAT_EXCHANGE,
      ChatRoutingKeyEnum.DATA_WRITE,
      {
        type: ChatWriteRequestTypeEnum.MESSAGE_READ,
        body,
      },
    )
  }

  @UsePipes(WSValidationPipe)
  @UseGuards(WsAuthGuard)
  @SubscribeMessage(SocketEventsEnum.WEB_MESSAGE_DELIVERED)
  async eventMessageDelivered(
    @MessageBody() body: MessageDeliveredDto,
    @ConnectedSocket() socket: Socket,
  ) {
    body.memberId = socket.data.memberId

    await this.rmqService.publishMessage(
      CHAT_EXCHANGE,
      ChatRoutingKeyEnum.DATA_WRITE,
      {
        type: ChatWriteRequestTypeEnum.MESSAGE_DELIVERED,
        body,
        socketId: socket.id,
      },
    )
  }

  @UsePipes(WSValidationPipe)
  @UseGuards(WsAuthGuard)
  @SubscribeMessage(SocketEventsEnum.WEB_MESSAGE_REMOVE)
  async eventMessageRemove(
    @MessageBody() body: MessageDeleteDto,
    @ConnectedSocket() socket: Socket,
  ) {
    body.memberId = socket.data.memberId

    await this.rmqService.publishMessage(
      CHAT_EXCHANGE,
      ChatRoutingKeyEnum.DATA_WRITE,
      { type: ChatWriteRequestTypeEnum.MESSAGE_REMOVE, body },
    )
  }

  @UsePipes(WSValidationPipe)
  @UseGuards(WsAuthGuard)
  @SubscribeMessage(SocketEventsEnum.MEMBER_TYPING)
  async eventMemberTyping(
    @MessageBody() data: MemberTypingDto,
    @ConnectedSocket() socket: Socket,
  ) {
    await this.rmqService.publishMessage(
      CHAT_EXCHANGE,
      ChatRoutingKeyEnum.EVENT_SUBSCRIBE,
      { type: ChatEventTypeEnum.MEMBER_TYPING, body: data },
    )

    const { roomId } = data

    socket.broadcast.to(roomId).emit(SocketEventsEnum.MEMBER_TYPING, data)
  }

  @UseGuards(WsAuthGuard)
  @SubscribeMessage(SocketEventsEnum.WEB_MESSAGES_UNREADED)
  async messagesUnreaded(
    @MessageBody() data: { signature: MessageSignatureType },
    @ConnectedSocket() socket: Socket,
  ) {
    const memberId = socket.data.memberId
    const socketId = socket.id

    await this.rmqService.publishMessage(
      CHAT_EXCHANGE,
      ChatRoutingKeyEnum.DATA_READ,
      {
        type: ChatReadRequestTypeEnum.MESSAGES_UNREADED,
        body: { memberId, socketId },
        signature: data?.signature,
      },
    )
  }

  @RabbitSubscribe({
    exchange: CHAT_EXCHANGE,
    queue: ChatQueueEnum.SOCKET_EVENTS_ONLY_QUEUE,
    routingKey: ChatRoutingKeyEnum.EVENT_SUBSCRIBE_ONLY_SOCKET,
  })
  onlySocketEventsHandling(message: {
    body: Record<string, any>
    type: ChatEventTypeEnum
    socketId?: string
    signature: MessageSignatureType
  }) {
    const { body, type, socketId, signature } = message

    switch (type) {
      case ChatEventTypeEnum.MESSAGES_UNREADED: {
        this.server
          .to(socketId)
          .emit(SocketEventsEnum.CHAT_SERVICE_MESSAGE_UNREAD, {
            ...body,
            signature,
          })
        return
      }
    }
  }

  @RabbitSubscribe({
    exchange: CHAT_EXCHANGE,
    queue: ChatQueueEnum.CHAT_QUEUE_EVENTS,
    routingKey: ChatRoutingKeyEnum.EVENT_SUBSCRIBE,
  })
  async eventQueueHandling(message: {
    body: Record<string, any>
    type: ChatEventTypeEnum
    socketId?: string
    signature: MessageSignatureType
  }) {
    const { body, type, signature, socketId } = message

    switch (type) {
      case ChatEventTypeEnum.ROOM_DELETED: {
        const { roomId } = body as RoomDeleteDto

        this.server
          .to(roomId)
          .emit(SocketEventsEnum.CHAT_SERVICE_ROOMS_DELETED, body)
        return
      }

      case ChatEventTypeEnum.ROOM_LEFTED: {
        const { roomId, memberId } = body

        const { allSockets, memberSockets } =
          await this.getAllAndMembersSockets(memberId)

        for (const socketId of memberSockets) {
          await allSockets.get(socketId).leave(roomId)
        }

        this.server
          .to(memberSockets.concat(roomId))
          .emit(SocketEventsEnum.CHAT_SERVICE_ROOMS_LEFT, body)
        return
      }

      case ChatEventTypeEnum.MESSAGE_REMOVED: {
        const { roomId } = body as MessageDeleteDto

        this.server
          .to(roomId)
          .emit(SocketEventsEnum.CHAT_SERVICE_MESSAGE_REMOVED, body)
        return
      }

      case ChatEventTypeEnum.MEMBER_CHANGED_STATUS: {
        const { roomsIds, ...other } = body as Record<string, any>

        this.server
          .to(roomsIds)
          .emit(SocketEventsEnum.CHAT_SERVICE_MEMBER_STATUS, {
            ...other,
            signature,
          })
        return
      }
      case ChatEventTypeEnum.ROOM_CREATED: {
        const { creatorId, id } = body

        const { allSockets, memberSockets } =
          await this.getAllAndMembersSockets(creatorId)

        for (const socketId of memberSockets) {
          await allSockets.get(socketId).join(id)
        }

        return
      }

      case ChatEventTypeEnum.MESSAGE_CREATED: {
        const { roomId } = body

        const socketId = body.socketId

        const event = socketId
          ? SocketEventsEnum.CHAT_SERVICE_EXCEPTION
          : SocketEventsEnum.CHAT_SERVICE_MESSAGE_CREATED

        this.server.to(socketId || roomId).emit(event, body)
        return
      }

      case ChatEventTypeEnum.ROOM_JOINED: {
        const { roomId, memberId } = body as RoomsJoinedDto

        const { allSockets, memberSockets } =
          await this.getAllAndMembersSockets(memberId)

        for (const socketId of memberSockets) {
          await allSockets.get(socketId).join(roomId)
        }

        this.server
          .to(roomId)
          .emit(SocketEventsEnum.CHAT_SERVICE_ROOMS_JOINED, body)

        return
      }

      case ChatEventTypeEnum.MESSAGE_CHANGED_STATUS: {
        const { roomId } = body

        this.server
          .to(roomId)
          .emit(SocketEventsEnum.CHAT_SERVICE_MESSAGE_CHANGE_STATUS, body)

        return
      }

      case ChatEventTypeEnum.MESSAGE_UPDATED: {
        const { roomId } = body as MessageUpdatedType

        this.server
          .to(roomId)
          .emit(SocketEventsEnum.CHAT_SERVICE_MESSAGE_UPDATED, body)
      }
    }
  }

  async getAllAndMembersSockets(memberId: string) {
    const sockets = (await this.server.fetchSockets())
      .filter((el) => el.data.memberId === memberId)
      .map((el) => el.id)

    return {
      allSockets: this.server.sockets.sockets,
      memberSockets: sockets,
    }
  }
}
